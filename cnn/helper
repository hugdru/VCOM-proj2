#!/usr/bin/env bash

SCRIPT_DIR="$(readlink -f "${0%/*}")"
ENV_FOLDER="$SCRIPT_DIR/env"
CODE_FOLDER="$SCRIPT_DIR/cnn"
TEST_FOLDER="$SCRIPT_DIR/test"
REQUIREMENTS_FOLDER="$SCRIPT_DIR/requirements"

requirements=(dev cpu)
if [[ -n "$BUILD" ]]; then
  IFS=' ' read -r -a requirements <<< "$BUILD"
fi
requirements=(common "${requirements[@]}")

main() {
  if [[ $# -lt 1 ]]; then
    usage bail
  fi

  local subcommand="$1"
  case "$subcommand" in
    run|env|test)
      sc_"$subcommand" "${@:2}"
      ;;
    *)
      usage bail
  esac
}

sc_run() {
  arguments=("$@")
  arguments_len=$#
  argument_separator_index=-1
  for index in "${!arguments[@]}"; do
    if [[ ${arguments[$index]} == "--" ]]; then
      argument_separator_index=$index
      break
    fi
  done

  run_arguments=()
  app_arguments=()
  if (( $argument_separator_index != -1 )); then
    run_arguments=("${arguments[@]::$argument_separator_index}")
    app_arguments=("${arguments[@]:$argument_separator_index+1:$arguments_len}")
  else
    run_arguments=("${arguments[@]::$arguments_len}")
  fi

  check_python_version

  env_arguments=()
  for run_argument in "${run_arguments[@]}"; do
    case "$run_argument" in
      -f)
        env_arguments+=("$run_argument")
        ;;
    esac
  done

  sc_env "${env_arguments[@]}"

  python3 "$CODE_FOLDER/app.py" "${app_arguments[@]}"
}

sc_test() {
  check_python_version
  sc_env
  python -m unittest discover -s "$TEST_FOLDER" -p "test_*.py"
}

sc_env() {
  if [[ $# -eq 1 ]]; then
    if [[ "$1" == '-f' ]]; then
      rm -rf "$ENV_FOLDER"
    fi
  fi
  if [[ ! -d "$ENV_FOLDER" ]]; then
    log_message "Creating env"
    1>&2 python3 -m venv "$ENV_FOLDER"

    source "$ENV_FOLDER/bin/activate"
    if [[ -d "$REQUIREMENTS_FOLDER" ]]; then
        log_message "Installing requirements"
        for requirement in "${requirements[@]}"; do
          1>&2 pip install -r "$REQUIREMENTS_FOLDER/$requirement.txt"
        done
    else
        log_message "No requirements.txt file skipping requirements installation"
    fi
  else
    log_message 'Env already exists skipping...'
    source "$ENV_FOLDER/bin/activate"
  fi
}

usage() {
  local bail="$1"

  read -r -d '' usage_string <<EOF
$0 (run|env [-f])
\trun # runs the code
\tenv [-f] # creates the environment
\t\t-f \t# forces env recreation and installs the requirements
EOF

  log_message -e "$usage_string"

  if [[ ! -z "$bail" ]]; then
    exit 1
  fi
}

check_python_version() {
  if ! type python3 >/dev/null 2>&1; then
    log_message 'Missing executable, python3 not found in $PATH'
    exit 1
  fi

  local python_version="$(python3 --version | awk '{print $2}')"
  IFS='.' read -r -a python_version_split <<< "$python_version"
  log_message "You are running python $python_version"

  local major="${python_version_split[0]}"
  local minor="${python_version_split[1]}"
  local patch="${python_version_split[2]}"

  if [[ "$major" -lt 3 ]]; then
    log_message 'This code only runs on python3'
    exit 1
  elif [[ "$major" -eq 3 && "$minor" -lt 6 ]]; then
    log_message 'Be advised, this code was only tested on python3.6!'
  fi
}

log_message() {
    1>&2 echo "$@"
}

main "$@"
