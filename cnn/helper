#!/usr/bin/env bash

SCRIPT_DIR="$(readlink -f "${0%/*}")"
ENV_FOLDER="$SCRIPT_DIR/env"
CODE_FOLDER="$SCRIPT_DIR/cnn"
CSV_MAIN_FILE="$CODE_FOLDER/csv_gen.py"
TRAIN_MAIN_FILE="$CODE_FOLDER/train.py"
CLASSIFY_MAIN_FILE="$CODE_FOLDER/classify.py"
TEST_FOLDER="$SCRIPT_DIR/test"
REQUIREMENTS_FOLDER="$SCRIPT_DIR/requirements"

PYTHON_PATH="$(find /usr/bin/ -regex ".*/python\([0-9]\(\.[0-9]+\)*\)?$" | sort -r | head -n 1)"
if [[ -z "$PYTHON_PATH" ]]; then
  log_message "Python not found"
  exit 1
fi
PYTHON="${PYTHON_PATH##*/}"
PYTHON_VERSION="$("$PYTHON" --version | awk '{print $2}')"

REQUIREMENTS=(common external dev)

# _.* variables are used for function returns.
# Bash does not have "typical" return values only return codes
# Echo and then capture would be a mess too. 
# Starting to feel hacky and sloppy.
# Python or some other language warranted.
#
# Used in args_separator()
_SB_ARGS_ARRAY=
_APP_ARGS_ARRAY=
# Used in env_args()
_ENV_ARGS_ARRAY=

main() {
  if [[ $# -lt 1 ]]; then
    usage bail
  fi

  check_python_version

  local subcommand="$1"
  case "$subcommand" in
    csv_gen|train|classify|env|test)
      sc_"$subcommand" "${@:2}"
      ;;
    *)
      usage bail
  esac
}

check_python_version() {
  log_message "Selected python $PYTHON_VERSION to run the app"

  IFS='.' read -r -a python_version_split <<< "$PYTHON_VERSION"

  local major="${python_version_split[0]}"
  local minor="${python_version_split[1]}"
  local patch="${python_version_split[2]}"

  if [[ "$major" -ne 3 ]]; then
    log_message 'This code was only tested on python3'
  elif [[ "$major" -eq 3 && "$minor" -lt 6 ]]; then
    log_message 'Be advised, this code was only tested on python3.6!'
  fi
}

args_separator() {
  _SB_ARGS_ARRAY=
  _APP_ARGS_ARRAY=

  local arguments=("$@")
  local arguments_len=$#
  local argument_separator_index=-1
  for index in "${!arguments[@]}"; do
    if [[ ${arguments[$index]} == "--" ]]; then
      argument_separator_index=$index
      break
    fi
  done

  local sb_arguments=()
  local app_arguments=()
  if (( $argument_separator_index != -1 )); then
    sb_arguments=("${arguments[@]::$argument_separator_index}")
    app_arguments=("${arguments[@]:$argument_separator_index+1:$arguments_len}")
  else
    sb_arguments=("${arguments[@]::$arguments_len}")
  fi

  _SB_ARGS_ARRAY=("${sb_arguments[@]}")
  _APP_ARGS_ARRAY=("${app_arguments[@]}")
}

env_args() {
  _ENV_ARGS_ARRAY=

  local sb_arguments=("$@")

  local env_arguments=()
  for sb_argument in "${sb_arguments[@]}"; do
    case "$sb_argument" in
      -f)
        env_arguments+=("$sb_argument")
        ;;
    esac
  done

  _ENV_ARGS_ARRAY=("${env_arguments[@]}")
}

sc_csv_gen() {
  sc_env_common "$@"
  python "$CSV_MAIN_FILE" "${_APP_ARGS_ARRAY[@]}"
}

sc_train() {
  sc_env_common "$@"
  python "$TRAIN_MAIN_FILE" "${_APP_ARGS_ARRAY[@]}"
}

sc_classify() {
  sc_env_common "$@"
  python "$CLASSIFY_MAIN_FILE" "${_APP_ARGS_ARRAY[@]}"
}

sc_env_common() {
  args_separator "$@"
  env_args "${_SB_ARGS_ARRAY[@]}"
  sc_env "${_ENV_ARGS_ARRAY[@]}"
}

sc_test() {
  sc_env
  python -m unittest discover -s "$TEST_FOLDER" -p "test_*.py"
}

sc_env() {
  if [[ $# -eq 1 ]]; then
    if [[ "$1" == '-f' ]]; then
      rm -rf "$ENV_FOLDER"
    fi
  fi
  if [[ ! -d "$ENV_FOLDER" ]]; then
    log_message "Creating env"
    1>&2 "$PYTHON" -m venv "$ENV_FOLDER"
    if [[ $? -ne 0 ]]; then
      log_message "Failed creating the environment"
      rm -rf "$ENV_FOLDER"
      exit 1
    fi
    source "$ENV_FOLDER/bin/activate"

    1>&2 pip install --upgrade pip

    if [[ -d "$REQUIREMENTS_FOLDER" ]]; then
        log_message "Installing requirements"
        for requirement in "${REQUIREMENTS[@]}"; do
          1>&2 pip install -r "$REQUIREMENTS_FOLDER/$requirement.txt"
        done
    else
        log_message "No requirements.txt file skipping requirements installation"
    fi
  else
    log_message 'Env already exists skipping...'
    source "$ENV_FOLDER/bin/activate"
  fi
}

usage() {
  local bail="$1"

  read -r -d '' usage_string <<EOF
$0 (csv_gen | train | classify) [-f] [-- ..app_arguments] | env [-f]
 csv   # generates the csv files for fizyr/keras-retinanet
  -f              # forces env recreation and installs the requirements
  --              # separates run arguments from app arguments
  ..app_arguments # the arguments to pass to the app

  default: only creates env if it does not exist does not pass arguments to the app


 train   # calls the train script for fizyr/keras-retinanet
  -f              # forces env recreation and installs the requirements
  --              # separates run arguments from app arguments
  ..app_arguments # the arguments to pass to the app

  default: only creates env if it does not exist does not pass arguments to the app


 classify   # classifies the test images and external images
  -f              # forces env recreation and installs the requirements
  --              # separates run arguments from app arguments
  ..app_arguments # the arguments to pass to the app

  default: only creates env if it does not exist does not pass arguments to the app


 env   # creates the environment
  -f              # forces env recreation and installs the requirements

  default: only creates env if it does not exist
EOF

  log_message -e "$usage_string"

  if [[ ! -z "$bail" ]]; then
    exit 1
  fi
}

log_message() {
    1>&2 echo "$@"
}

main "$@"
